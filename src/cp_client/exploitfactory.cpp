#include "exploitfactory.h"

#include "radiantdamage.hpp"
#include "poisondamage.hpp"
#include "aciddamage.hpp"

ExploitFactory::ExploitFactory() :
	m_exploits({
		"RADIANTDAMAGE",
		"POISONDAMAGE",
		"ACIDDAMAGE"
	})
{
}

ExploitFactory::~ExploitFactory()
{
}

bool ExploitFactory::availableExploit(const std::string& p_exploit) const
{
	for (std::set<std::string>::iterator it = m_exploits.begin();
		it != m_exploits.end(); ++it)
	{
		if (p_exploit == *it)
		{
			return true;
		}
	}

	return false;
}

const std::set<std::string>& ExploitFactory::getExploits() const
{
	return m_exploits;
}

std::shared_ptr<Exploit> ExploitFactory::createExploit(const std::string& p_exploit) const
{
	if (p_exploit == "RADIANTDAMAGE")
	{
		return std::make_shared<RadiantDamage>();
	}
	else if (p_exploit == "POISONDAMAGE")
	{
		return std::make_shared<PoisonDamage>();
	}
	else if (p_exploit == "ACIDDAMAGE")
	{
		return std::make_shared<AcidDamage>();
	}

	return NULL;
}